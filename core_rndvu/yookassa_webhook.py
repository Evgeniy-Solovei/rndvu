from datetime import timedelta
import httpx
from adrf.views import APIView
from django.http import JsonResponse, HttpResponse
from django.utils.timezone import localtime
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import sync_and_async_middleware, method_decorator
from drf_spectacular.types import OpenApiTypes
from drf_spectacular.utils import extend_schema, OpenApiResponse, OpenApiExample

from core_rndvu.models import Player, Product, Purchase
from logger_conf import logger
import json
import uuid
from rndvu import settings


async def create_yookassa_payment(amount: int, return_url: str, description: str, metadata: dict = None):
    url = "https://api.yookassa.ru/v3/payments"  # URL API –Æ–∫–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∏ –∑–∞–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã –ø–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –¥–≤–∞–∂–¥—ã)
    headers = {"Content-Type": "application/json", "Idempotence-Key": str(uuid.uuid4()),}
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî –±–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
    auth = (settings.YOOKASSA_SHOP_ID, settings.YOOKASSA_SECRET_KEY)
    # –ì–µ–Ω–µ—Ä–∏–º –ª–µ–≤—É—é –ø–æ—á—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ tg_id –∏–∑ metadata
    tg_id = metadata.get("tg_id", "unknown") if metadata else "unknown"
    fake_email = f"user_{tg_id}@astro.ru"
    data = {
        "amount": {
            "value": f"{amount:.2f}",  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —Å—Ç—Ä–æ–∫—É —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            "currency": "RUB",         # –í–∞–ª—é—Ç–∞ ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å
        },
        "confirmation": {
            "type": "redirect",        # –¢–∏–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
            "return_url": return_url,  # URL, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—ë—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        },
        "capture": True,               # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        "description": description,    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
        "metadata": metadata or {},    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ—É, —Ç—É—Ç –ø–µ—Ä–µ–¥–∞–µ–º tg_id –∏ product_id)
        "receipt": {
            "customer": {
                "email": fake_email  # –õ–µ–≤–∞—è –ø–æ—á—Ç–∞
            },
            "items": [
                {
                    "description": description[:128],  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "vat_code": 4,  # –ë–µ–∑ –ù–î–° (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
                    "payment_mode": "full_payment",
                    "payment_subject": "commodity"
                }
            ]
        }
    }
    # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    async with httpx.AsyncClient() as client:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ç–µ–ª–æ–º data, —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = await client.post(url, json=data, auth=auth, headers=headers)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (201 ‚Äî —Å–æ–∑–¥–∞–Ω–æ, 200 ‚Äî —É—Å–ø–µ—à–Ω–æ)
    if response.status_code == 200 or response.status_code == 201:
        return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–∞–º –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    else:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏ –æ—Ç –Æ–∫–∞—Å—Å—ã
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {response.text}")


@extend_schema(
    tags=["–Æ–∫–∞—Å—Å–∞"],
    summary="Webhook YooKassa",
    description=(
        "–ÆKassa —à–ª—ë—Ç —Å—é–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ.\n\n"
        "–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º; –≤—Ä—É—á–Ω—É—é —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
    ),
    responses={
        200: OpenApiResponse(description="OK (–ø—Ä–∏–Ω—è—Ç–æ)"),
        400: OpenApiResponse(
            response=OpenApiTypes.OBJECT,
            description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
            examples=[OpenApiExample("Missing data", value="Missing data")],
        ),
    },
)
@method_decorator(csrf_exempt, name='dispatch')
class YookassaWebhookView(APIView):
    async def post(self, request):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ webhook –æ—Ç –Æ–∫–∞—Å—Å—ã (–≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ)
        body = request.body
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä—å Python
        data = json.loads(body)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "payment.succeeded")
        event_type = data.get("event")
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞ (–≤–Ω—É—Ç—Ä–∏ –∫–ª—é—á–∞ "object")
        payment_data = data.get("object", {})
        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ ‚Äî —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        if event_type == "payment.succeeded":
            payment_id = payment_data["id"]  # –ü–æ–ª—É—á–∞–µ–º id –ø–ª–∞—Ç–µ–∂–∞
            metadata = payment_data.get("metadata", {})  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–∞–º —Ö—Ä–∞–Ω—è—Ç—Å—è tg_id –∏ product_id)
            tg_id = metadata.get("tg_id")  # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            product_id = metadata.get("product_id")  # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if not all([payment_id, tg_id, product_id]):
                logger.error("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±—Ö—É–∫–µ")
                return HttpResponse("Missing data", status=400)
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–µ—á–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
            success = await mark_payment_success(tg_id=tg_id, product_id=product_id, payment_id=payment_id)
            if not success:
                return HttpResponse("Failed to process", status=400)
        elif event_type == "payment.waiting_for_capture":
            logger.info("‚è≥ –ü–ª–∞—Ç—ë–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (capture), ID: %s", payment_data.get("id"))
        elif event_type == "payment.canceled":
            logger.warning("üö´ –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω, ID: %s", payment_data.get("id"))
        elif event_type == "payment.expired":
            logger.warning("‚åõ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, ID: %s", payment_data.get("id"))
        elif event_type == "refund.succeeded":
            logger.info("üí∏ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, ID: %s", payment_data.get("id"))
        else:
            logger.info(f"üì® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Æ–∫–∞—Å—Å–µ –æ—Ç–≤–µ—Ç, —á—Ç–æ webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
        return HttpResponse("OK", status=200)


async def mark_payment_success(tg_id: int, product_id: int, payment_id: str):
    try:
        player = await Player.objects.aget(tg_id=tg_id)
        product = await Product.objects.aget(id=product_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∫—É–ø–∫–∞ —Å —Ç–∞–∫–∏–º payment_id
        exists = await Purchase.objects.filter(payment_id=payment_id).aexists()
        if exists:
            logger.warning(f"‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ —Å payment_id={payment_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        await Purchase.objects.acreate(player=player, product=product, payment_id=payment_id, is_successful=True)
        # –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –ø–ª–∞—Ç–Ω–æ–≥–æ
        today = localtime().date()
        extra_days = timedelta(days=product.duration_days)
        if player.subscription_end_date and player.subscription_end_date >= today:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            player.subscription_end_date += extra_days
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            player.subscription_end_date = today + extra_days
        player.paid_subscription = True
        player.count_days_paid_subscription += product.duration_days
        await player.asave(update_fields=['paid_subscription', 'count_days_paid_subscription', 'subscription_end_date'])
        return True
    except Player.DoesNotExist:
        logger.error(f"‚ùå –ò–≥—Ä–æ–∫ —Å tg_id={tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Product.DoesNotExist:
        logger.error(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å id={product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {str(e)}")
    return False
